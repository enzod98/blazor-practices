@using Entities
@using Business

<div class="form-group">
    <select class="form-control" @onchange="OnChangeWarehouse">
        <option>Seleccione una bodega...</option>
        @foreach(var item in warehouses)
        {
            <option value="@item.WarehouseId">
                @item.WarehouseName
            </option>
        }
    </select>

</div>
<hr/>

<EditForm Model="oInOut">
    <div class="form-group" >
        <InputSelect class="form-control" @bind-Value="oInOut.StorageId">
            <option>Seleccione el almacén...</option>
            @foreach(var item in storages)
            {
                <option value="@item.StorageId">
                    @item.Product.ProductName
                </option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <label >Escriba la cantidad:</label>
        <InputNumber class="form-control" @bind-Value="oInOut.Quantity" />
    </div>
    <div class="form-group">
        <label >¿Es una entrada?</label>
        <InputCheckbox class="form-control" @bind-Value="oInOut.IsInput" />
    </div>

    <input type="button" class="form-control" value="@messageButton" @onclick="SaveInOut" />
</EditForm>

<div class="text-center h4">
    @message
</div>

@code {
    InputOutputEntity oInOut = new InputOutputEntity();
    List<WarehouseEntity> warehouses = new List<WarehouseEntity>();
    List<StorageEntity> storages = new List<StorageEntity>();

    ProductEntity oProduct = new ProductEntity();
    StorageEntity oStorage = new StorageEntity();

    string messageButton => oInOut.IsInput ? "Registrar entrada" : "Registrar salida";
    string message;
    protected override async Task OnInitializedAsync()
    {
        warehouses = B_Warehouse.EntityList();
    }

    private void OnChangeWarehouse(ChangeEventArgs e)
    {
        var idWarehouse = e.Value.ToString();
        storages = B_Storage.EntityListByWarehouse(idWarehouse);

    }

    private void SaveInOut()
    {
        oStorage = storages.FirstOrDefault(x => x.StorageId == oInOut.StorageId);
        oProduct = oStorage.Product;

        if (oInOut.IsInput)
        {
            oStorage.PartialQuantity += oInOut.Quantity;
            B_Storage.UpdateItem(oStorage);

            oProduct.TotalQuantity += oInOut.Quantity;
            B_Product.UpdateItem(oProduct);

            message = $"El producto {oProduct.ProductName} ha sido actualizado";
        }
        else
        {
            if (IsBiggerThanZero(oInOut.Quantity, oStorage.PartialQuantity)
                && IsBiggerThanZero(oProduct.TotalQuantity, oStorage.PartialQuantity))
            {
                oStorage.PartialQuantity -= oInOut.Quantity;
                B_Storage.UpdateItem(oStorage);

                oProduct.TotalQuantity -= oInOut.Quantity;
                B_Product.UpdateItem(oProduct);
                
                message = $"El producto {oProduct.ProductName} ha sido actualizado";
            }
            else
            {
                message = "No existe la cantidad suficiente en bodega para el producto";
            }
        }
        //B_InputOutput
    }

    private bool IsBiggerThanZero(int quantity, int storageQuantity)
    {
        return storageQuantity >= quantity ? true : false;
    }
}
